<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://aaron19960821.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aaron19960821.github.io/" rel="alternate" type="text/html" /><updated>2020-10-11T18:20:45+08:00</updated><id>https://aaron19960821.github.io/feed.xml</id><entry><title type="html">Convexity</title><link href="https://aaron19960821.github.io/blog/Convexity/" rel="alternate" type="text/html" title="Convexity" /><published>2020-10-11T00:00:00+08:00</published><updated>2020-10-11T00:00:00+08:00</updated><id>https://aaron19960821.github.io/blog/Convexity</id><content type="html" xml:base="https://aaron19960821.github.io/blog/Convexity/">&lt;!-- Write from here your post !!! --&gt;

&lt;h1 id=&quot;convexity&quot;&gt;Convexity&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Convex Set&lt;/strong&gt;: For any \(x,y \in \mathrm{X}\), we have:&lt;br /&gt;
\(\alpha x + (1 - \alpha)y \in \mathrm{X}\)&lt;/p&gt;

&lt;p&gt;To define the convex functions, first we introduce two concepts: &lt;strong&gt;domain&lt;/strong&gt; and &lt;strong&gt;epigraph&lt;/strong&gt; of a function.&lt;/p&gt;

&lt;p&gt;\(\text{dom}f := \{x \in \mathrm{R}^D | f(x) &amp;lt; +\infty \}\)&lt;br /&gt;
\(\text{epi}f := \{(x,t) \in \text{dom}f * R | t \geq f(x)\}\)&lt;br /&gt;
&lt;strong&gt;Convex Function&lt;/strong&gt;: A function \(f\): \(\mathrm{R}^D \to [-\infty, +\infty]\) is convex if and only if \(\text{epi} f\) is convex.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proposition 1&lt;/strong&gt;: A function \(f\): \(\mathrm{X} \to [-\infty, +\infty]\) is convex if and only if \(\text{dom} f\) is convex and for any \(x,y \in \text{dom}f\), we have: &lt;br /&gt;
\(f(\alpha x + (1-\alpha x)y) \leq \alpha f(x) + (1-\alpha)f(y)\)&lt;/p&gt;

&lt;p&gt;From &lt;strong&gt;Proposition 1&lt;/strong&gt;, we will get: &lt;br /&gt;
\(E[f(\epsilon)] \geq f(E[\epsilon])\)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Differentiability&lt;/strong&gt;: We say a function \(f: \mathrm{R}^D \to [-\infty, +\infty]\) is differentiable at \(x \in \text{dom}f\) if and only if there exists some \(g_x \in \mathrm{R}^D\), such that:&lt;/p&gt;

\[f(y) = f(x) + \langle g_x, y-x \rangle + o(||y-x||_2)\]

&lt;p&gt;If such \(g_x\) exists, then we call it &lt;strong&gt;gradient&lt;/strong&gt;, noted as \(\nabla f(x)\) and we have:&lt;/p&gt;

\[[\nabla f(x)]^{(d)} = \frac{\partial f}{\partial x^{(d)}}(x), \forall d \in [D]\]

&lt;p&gt;&lt;strong&gt;Proposition 2&lt;/strong&gt;: Let \(f: \mathrm{R}^D \to (-\infty, +\infty]\) ve convex and differentiable on \(\text{dom}f\), Let \(\mathrm{X} \subseteq R^D\), then we have:&lt;/p&gt;

&lt;p&gt;\(x^{*} \in \text{argmin}_{x \in \mathrm{X}} f(x)\) 
if and only if:&lt;br /&gt;
\(\langle \nabla f(x^*), x-x^* \rangle \geq 0, \forall x \in \mathrm{X}\)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof&lt;/strong&gt;:&lt;br /&gt;
\(=&amp;gt;\)  &lt;br /&gt;
Suppose we have some $z$ that have:&lt;br /&gt;
\(\langle \nabla f(x^*), z-x^* \rangle &amp;lt; 0\)
Consider the function \(\phi(\alpha) = f(x^* + \alpha(z-x^*)), \alpha \in [0,1]\), then we have: \&lt;/p&gt;

&lt;p&gt;\(\phi^{'}(0) = \langle \nabla f(x^*), z-x^* \rangle &amp;lt; 0\)
Then if $\alpha$ is small enough, then we have \(f(x^* + \alpha(z-x^*)) &amp;lt; f(x^*)\) and it is a contradiction.&lt;br /&gt;
\(&amp;lt;=\)&lt;br /&gt;
Follow the convexity, it is very easy to prove.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proposition 3&lt;/strong&gt;: A function is a differentiable convex function if and only if the &lt;strong&gt;Hessian&lt;/strong&gt; of this function is semi-positive definite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;For 1-D case, we have this proposition equals to:&lt;br /&gt;
\(\langle \nabla_f y - \nabla_f x, y-x \rangle \geq 0\)&lt;/p&gt;

&lt;p&gt;And this proposition follows.&lt;/p&gt;

&lt;p&gt;Then we define:&lt;br /&gt;
\(\phi(t;x,y) = f(x+t(y-x))\)&lt;/p&gt;

&lt;p&gt;Since \(\phi\) can be seen as a part of \(f\), then we know that \(f\) is convex if and only if \(\phi\) is convex.&lt;/p&gt;

&lt;p&gt;Then we follow the 1-D dimention discussion above, we know that:&lt;/p&gt;

\[\phi^{''}(t;x,y) = \langle y-x, [\nabla^2 f(x+t(y-x))](y-x) \geq 0\]</content><author><name></name></author><category term="Optimization" /><category term="math" /><summary type="html"></summary></entry><entry><title type="html">Radiometry</title><link href="https://aaron19960821.github.io/blog/radiometry/" rel="alternate" type="text/html" title="Radiometry" /><published>2020-04-23T23:55:04+08:00</published><updated>2020-04-23T23:55:04+08:00</updated><id>https://aaron19960821.github.io/blog/radiometry</id><content type="html" xml:base="https://aaron19960821.github.io/blog/radiometry/">&lt;!-- Write from here your post !!! --&gt;

&lt;h1 id=&quot;radiometry&quot;&gt;Radiometry&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Radiometry&lt;/strong&gt; is the basic of light transport simulation. It explains how light transports and how to do realistic light transport simulation.&lt;/p&gt;

&lt;h2 id=&quot;solid-angle&quot;&gt;Solid Angle&lt;/h2&gt;

&lt;p&gt;Before getting to know concepts of light transport, we have to know &lt;strong&gt;Solid angle&lt;/strong&gt; first.&lt;/p&gt;

&lt;p&gt;We know that a point in a 3-D area can be expressed as a tuple: $(r, \theta, \phi)$. Like the figure below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/images/posts/solid_angle.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solid Angle&lt;/strong&gt; is defined as the following way:&lt;/p&gt;

\[\omega = \frac{A}{r^2}\]

&lt;p&gt;Where $A$ is the corresponding surface area on sphere. When we do differentiation on it, it becomes:&lt;/p&gt;

\[d \omega = \frac{dA}{r^2} = sin \theta d \theta d \phi\]

&lt;p&gt;We can integrate solid angle over a sphere:&lt;/p&gt;

\[\int_S d \omega = \int_0^{2 \pi} \int_0^{\pi} sin \theta d \theta d \phi = 4 \pi\]

&lt;h2 id=&quot;radiometry-1&quot;&gt;Radiometry&lt;/h2&gt;

&lt;p&gt;Firstly we introduce some concepts in &lt;strong&gt;Radiometry&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flux&lt;/strong&gt;: note as $\Phi$, expressed in Watts. Expressing how much energy flows from/to/through a surface per unit time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Irradiance&lt;/strong&gt;: The incident radiant power on a surface, per unit surface area. Noted as $E$, expressed as:&lt;br /&gt;
\(E = \frac{d \Phi}{dA}\)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Radiant intensity&lt;/strong&gt;: Expressing the radiant power per solid angle, expressed as:&lt;br /&gt;
\(I = \frac{d \Phi}{d \omega}\)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Radiance&lt;/strong&gt;: Flux per unit solid angle per unit surface area, can be expressed:&lt;br /&gt;
\(L = \frac{d^2 \Phi}{d \omega d A^{\perp}} = \frac{d^2 \Phi}{d \omega dA cos\theta}\)&lt;/p&gt;

&lt;h2 id=&quot;bidirectional-reflectance-distribution-functionbrdf&quot;&gt;Bidirectional Reflectance Distribution Function(BRDF)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Reflectance&lt;/strong&gt; can be explained in the following way: Energy flows from incident directions and absorbed by differential surface area $dA$ and emits to different solid angles.&lt;/p&gt;

&lt;p&gt;The incident irradiance can be expressed as:&lt;/p&gt;

\[dE(\omega_i) = L(\omega_i) cos \theta_i d \omega\]

&lt;p&gt;The exitant radiance:&lt;/p&gt;

\[dL_r(\omega_o)\]

&lt;p&gt;Thus, we denote &lt;strong&gt;BRDF&lt;/strong&gt; as the following thing:&lt;/p&gt;

\[f_r(\omega_i, \omega_o) = \frac{dL_r(\omega_o)}{dE(\omega_i)}\]

&lt;p&gt;Note that the differential surface can also emitted randiance itself, we express it as $L_e(\omega)$. Thus exitance radiance of surface can be expressed as:&lt;/p&gt;

\[L(x \rightarrow \omega_o) = L_e(x \rightarrow \omega_o) + \int_S L(x \leftarrow \omega_i) f_r(\omega_i, \omega_o)cos \theta_i d \omega\]

&lt;p&gt;This is famous &lt;strong&gt;rendering equation&lt;/strong&gt; published by &lt;em&gt;James Kajiya&lt;/em&gt; in 1986.&lt;/p&gt;

&lt;h2 id=&quot;the-rendering-equation&quot;&gt;The Rendering Equation&lt;/h2&gt;

&lt;p&gt;We can rewrite &lt;strong&gt;Rendering Equation&lt;/strong&gt; in the following form:&lt;/p&gt;

\[L(x \rightarrow \omega_o) = L_e(x \rightarrow \omega_o) + \int_{A}L(x, \omega_o)f_r(\omega_i, \omega_o)V(x, y)G(x, y)dA_y\]

&lt;p&gt;Note that $V(x,y)$ is the visibility function and $G(x,y)$ is the geometry term between $x$ and $y$.&lt;/p&gt;

&lt;p&gt;Next, we define the kernel function of rendering equation as:&lt;/p&gt;

\[K(x, y) = V(x,y)G(x,y)f_r(\omega_i, \vec{xy})\]

&lt;p&gt;Then we use &lt;strong&gt;linear operator&lt;/strong&gt; to rewrite &lt;strong&gt;rendering function&lt;/strong&gt;, we will get that:&lt;/p&gt;

\[\begin{aligned}
L &amp;amp;= E + KL \\
(I-K)L &amp;amp;= E \\
L &amp;amp;= (I-K)^{-1}E
\end{aligned}\]

&lt;p&gt;Then we use &lt;strong&gt;taylor expansion&lt;/strong&gt; on linear operators, we will get:&lt;/p&gt;

\[L = E + KE + K^2E+ ...\]

&lt;p&gt;We call $E$ as the emitted radiance in $x$, $KE$ as the direct illumination in $x$ and others are indirect illumination.&lt;/p&gt;</content><author><name></name></author><category term="rendering" /><category term="physics" /><category term="graphics" /><summary type="html"></summary></entry><entry><title type="html">Keywords about COVID-19 For me</title><link href="https://aaron19960821.github.io/blog/key_words_coronavirus/" rel="alternate" type="text/html" title="Keywords about COVID-19 For me" /><published>2020-02-19T00:00:00+08:00</published><updated>2020-02-19T00:00:00+08:00</updated><id>https://aaron19960821.github.io/blog/key_words_coronavirus</id><content type="html" xml:base="https://aaron19960821.github.io/blog/key_words_coronavirus/">&lt;p&gt;写于2020.4.17&lt;/p&gt;

&lt;p&gt;再次打开这份文档。这些词语，更多的给我的是一种陌生的感觉。好像做了一场很长的梦。有好像我一直在梦中一直没有醒过来。盯着这些词语看了很久，我才意识到，这些都是发生在我身边的，真实的事情。这些事情从未离我远去。&lt;/p&gt;

&lt;p&gt;我想，这可能是我永远也没法忘记的一个春天。疫情一开始，官方疯狂的打压说出疫情真相的人们，甚至中央电视台每天循环的播放疫情“可防可控，人不传人”。后来，钟南山院士到了武汉，说出了这是一种具有极强传染性的病毒。官方才开始封城，但依然再向外保证物资是充足的。随后我们就看到了，各大医院因为物资不足不停的向外求援，但是武汉市红十字会却不停的侵吞着本应该被送上前线的物资。大理市政府公然截夺了本应该被送往重庆，湖北重灾区的物资。各路牛鬼蛇神也趁机出来兴风作浪，人民日报一句“双黄连或可以抑制新冠肺炎”，就让很多人彻夜排队。蛋壳，自如等租房公司，凭着一份没有法律效益的倡议书，就强行“免除”了本应该付给房东的房租。李文亮医生去世的那天，大概是我这几年最难过的一个夜晚。又一个说真话的人走了，而他本来，也只是想保护他想保护的家人和朋友。&lt;/p&gt;

&lt;p&gt;两个月过去了，生活逐渐在恢复正常。但在我的内心，一种不安的情绪却越来越强烈。两个月前的恶魔们，似乎再没有人去提起。也没有人去追责。只要是一些记录了疫情下武汉底层人民的文章，就会被群起而攻之。大家似乎都在嘲笑国外抗击疫情的“不力”。陶醉在一片歌舞升平当中。&lt;/p&gt;

&lt;p&gt;这让人感到非常痛苦。我们的社会，应该是一个自由，开放的社会。大家应该能够自由的表达自己的意见，而不是因为一两句所谓的“不正确”的话就遭到制裁。坏的事情应该被惩戒，坏的官员应该被处理。我想，我眼前的中国，看起来是如此的强大，但是，让人感觉又是如此的贫乏。社交网络上稍微的批评就会招致恶毒的咒骂，中国，已经不再是礼仪之邦。她正在变得越来越狭隘，越来越贫瘠。&lt;/p&gt;

&lt;p&gt;而我，却不知道该如何改变这一切。&lt;/p&gt;

&lt;p&gt;有的时候，想到这些事情。心里总有一些无力感。是啊，我们都说，文革给我们带来了无尽的灾祸。可下一场文革，离我们又有多远呢？像某位推友说的，十年，差不多是我活在这个世界上一半的时间。而人的生命，只有一次。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;李文亮医生；能，明白&lt;/li&gt;
  &lt;li&gt;可防可控；有限人传人&lt;/li&gt;
  &lt;li&gt;钟南山院士&lt;/li&gt;
  &lt;li&gt;武汉市委；物资充足&lt;/li&gt;
  &lt;li&gt;武汉市红十字会；湖北省慈善总会&lt;/li&gt;
  &lt;li&gt;中科院武汉病毒研究所；所长&lt;/li&gt;
  &lt;li&gt;双黄连口服液；抑制&lt;/li&gt;
  &lt;li&gt;大理；重庆&lt;/li&gt;
  &lt;li&gt;无证据；气溶胶&lt;/li&gt;
  &lt;li&gt;湖北省身份证；劝返&lt;/li&gt;
  &lt;li&gt;武汉；敲锣&lt;/li&gt;
  &lt;li&gt;口罩；微商&lt;/li&gt;
  &lt;li&gt;野蛮执法；暴力执法&lt;/li&gt;
  &lt;li&gt;蛋壳；自如&lt;/li&gt;
  &lt;li&gt;当当；强制复工&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="COVID-19" /><summary type="html">写于2020.4.17</summary></entry><entry><title type="html">Voice Control Gun</title><link href="https://aaron19960821.github.io/blog/voice_control_gun/" rel="alternate" type="text/html" title="Voice Control Gun" /><published>2020-02-05T00:00:00+08:00</published><updated>2020-02-05T00:00:00+08:00</updated><id>https://aaron19960821.github.io/blog/voice_control_gun</id><content type="html" xml:base="https://aaron19960821.github.io/blog/voice_control_gun/">&lt;h2 id=&quot;voice-control-gun&quot;&gt;Voice Control Gun&lt;/h2&gt;

&lt;p&gt;This project is developed via Google Daydream platform and Unread Engine 4.&lt;/p&gt;

&lt;p&gt;When users say “Boom”, the gun will shoot and when they say “Jump”, they will just jump.&lt;/p&gt;

&lt;p&gt;For reference, please view the following video.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=m3vz75XU9Ew&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/m3vz75XU9Ew/0.jpg&quot; alt=&quot;Reference Video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="VR" /><category term="Course Work" /><summary type="html">Voice Control Gun</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://aaron19960821.github.io/blog/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-10-03T21:22:16+08:00</published><updated>2019-10-03T21:22:16+08:00</updated><id>https://aaron19960821.github.io/blog/welcome-to-jekyll</id><content type="html" xml:base="https://aaron19960821.github.io/blog/welcome-to-jekyll/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#examples&quot; id=&quot;markdown-toc-examples&quot;&gt;Examples&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#table&quot; id=&quot;markdown-toc-table&quot;&gt;Table&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#list&quot; id=&quot;markdown-toc-list&quot;&gt;List&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#image-responsive-plugin-imager&quot; id=&quot;markdown-toc-image-responsive-plugin-imager&quot;&gt;Image responsive (plugin Imager)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#code-in-one-line---text&quot; id=&quot;markdown-toc-code-in-one-line---text&quot;&gt;Code in one line - Text&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#unlighted-code&quot; id=&quot;markdown-toc-unlighted-code&quot;&gt;Unlighted code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#latex-code&quot; id=&quot;markdown-toc-latex-code&quot;&gt;Latex Code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gist-code&quot; id=&quot;markdown-toc-gist-code&quot;&gt;Gist code&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hi! :hand:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.webpagefx.com/tools/emoji-cheat-sheet/&quot; target=&quot;_blank&quot;&gt;Emoji Syntax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot; target=&quot;_blank&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot; target=&quot;_blank&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Titles with icon - Plugin Fa&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;table&quot;&gt;Table&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;First Header&lt;/th&gt;
      &lt;th&gt;Second Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Content from cell 1&lt;/td&gt;
      &lt;td&gt;Content from cell 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content in the first column&lt;/td&gt;
      &lt;td&gt;Content in the second column&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;list&quot;&gt;List&lt;/h2&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;@mentions, #refs, &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;links&lt;/a&gt;, &lt;strong&gt;formatting&lt;/strong&gt;, and &lt;del&gt;tags&lt;/del&gt; supported&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;list syntax required (any unordered or ordered list supported)&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;this is a complete item&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;this is an incomplete item&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;Item 1&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;Item 2
    &lt;ul&gt;
      &lt;li&gt;Item 2a&lt;/li&gt;
      &lt;li&gt;Item 2b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;Item 2&lt;/li&gt;
  &lt;li&gt;Item 3
    &lt;ol&gt;
      &lt;li&gt;Item 3a&lt;/li&gt;
      &lt;li&gt;Item 3b&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’re living the future so the present is our past.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;image-responsive-plugin-imager&quot;&gt;Image responsive (plugin Imager)&lt;/h2&gt;

&lt;div class=&quot;row imager__plugin&quot;&gt;
            &lt;img class=&quot;img-fluid mx-auto d-block&quot; src=&quot;/assets/images/posts/typing_logotype.png&quot; title=&quot;typing_logotype.png&quot; alt=&quot;typing_logotype.png&quot; /&gt;
          &lt;/div&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi eaque, temporibus quia praesentium dolores repellat minus corporis illo sequi ab numquam laborum blanditiis eveniet. Unde libero ex qui quas temporibus.
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi eaque, temporibus quia praesentium dolores repellat minus corporis illo sequi ab numquam laborum blanditiis eveniet. Unde libero ex qui quas temporibus.
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi eaque, temporibus quia praesentium dolores repellat minus corporis illo sequi ab numquam laborum blanditiis eveniet. Unde libero ex qui quas temporibus.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: left;&quot; class=&quot;img-fluid imager__plugin&quot; src=&quot;/assets/images/posts/typing_logotype.png&quot; title=&quot;typing_logotype.png&quot; alt=&quot;typing_logotype.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi eaque, temporibus quia praesentium dolores repellat minus corporis illo sequi ab numquam laborum blanditiis eveniet. Unde libero ex qui quas temporibus.
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi eaque, temporibus quia praesentium dolores repellat minus corporis illo sequi ab numquam laborum blanditiis eveniet. Unde libero ex qui quas temporibus.
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi eaque, temporibus quia praesentium dolores repellat minus corporis illo sequi ab numquam laborum blanditiis eveniet. Unde libero ex qui quas temporibus.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: right;&quot; class=&quot;img-fluid imager__plugin&quot; src=&quot;/assets/images/posts/typing_logotype.png&quot; title=&quot;typing_logotype.png&quot; alt=&quot;typing_logotype.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi eaque, temporibus quia praesentium dolores repellat minus corporis illo sequi ab numquam laborum blanditiis eveniet. Unde libero ex qui quas temporibus.
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi eaque, temporibus quia praesentium dolores repellat minus corporis illo sequi ab numquam laborum blanditiis eveniet. Unde libero ex qui quas temporibus.
Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi eaque, temporibus quia praesentium dolores repellat minus corporis illo sequi ab numquam laborum blanditiis eveniet. Unde libero ex qui quas temporibus.
Commodi eaque, temporibus quia praesentium dolores repellat minus corporis illo sequi ab numquam laborum blanditiis eveniet. Unde libero ex qui quas temporibus.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 10px;&quot; class=&quot;p-2 my-2 badge badge-secondary badge__plugin&quot;&gt;Ruby&lt;/span&gt;
&lt;span style=&quot;font-size: 20px;&quot; class=&quot;p-2 my-2 badge badge-secondary badge__plugin&quot;&gt;HTML5&lt;/span&gt;
&lt;span style=&quot;font-size: 30px;&quot; class=&quot;p-2 my-2 badge badge-secondary badge__plugin&quot;&gt;CSS3&lt;/span&gt;
&lt;span style=&quot;font-size: 40px;&quot; class=&quot;p-2 my-2 badge badge-secondary badge__plugin&quot;&gt;JQuery&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code-in-one-line---text&quot;&gt;Code in one line - Text&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Featured&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;unlighted-code&quot;&gt;Unlighted code&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fancyAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;facebox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;latex-code&quot;&gt;Latex Code&lt;/h2&gt;

\[a = cosx + sinx\]

&lt;h2 id=&quot;gist-code&quot;&gt;Gist code&lt;/h2&gt;

&lt;script src=&quot;https://gist.github.com/7ab295790e841929cf83c0b1676269af.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To use, see:&lt;a href=&quot;https://jektify.github.io&quot; target=&quot;_blank&quot;&gt;Jektify - Doc&lt;/a&gt;&lt;/p&gt;

&lt;dl class=&quot;jektify jektify--dark jektify--custom&quot;&gt;

          &lt;dt class=&quot;jektify__header jektify__header--dark jektify__header--custom&quot;&gt;

            &lt;a class=&quot;jektify__brand jektify__brand--dark jektify__brand--custom&quot; href=&quot;https://jektify.github.io&quot; target=&quot;_blank&quot;&gt;jektify&lt;/a&gt;

            &lt;i class=&quot;jektify__year jektify__year--dark jektify__year--custom&quot;&gt;&amp;copy;&amp;nbsp;2020&amp;nbsp;&lt;/i&gt;
              &lt;span class=&quot;jektify__button jektify__button--dark jektify__button--custom jektify__button--open&quot;&gt;+&lt;/span&gt;
          &lt;/dt&gt;

          &lt;dd class=&quot;jektify__body jektify__body--dark jektify__body--custom&quot; style=&quot;display: block&quot;&gt;

            

            &lt;h1 class=&quot;jektify__title jektify__title--dark jektify__user--dark jektify__title--custom&quot; style=&quot;display: none;&quot;&gt;Music name&lt;/h1&gt;

            &lt;p class=&quot;jektify__description jektify__description--dark jektify__description--custom&quot; style=&quot;display: none;&quot;&gt;Jekyll plugin to generate html snippets for embedding Spotify Musics.
To listen to the full song, open your Spotify and start these musics.
&lt;/p&gt;

            &lt;div class=&quot;jektify__tracklist jektify__tracklist--dark jektify__tracklist--custom&quot;&gt;
              &lt;iframe id=&quot;jektify__track&quot; class=&quot;jektify__track jektify__track--dark 
                jektify__track--custom&quot; src=&quot;https://embed.spotify.com/?uri=spotify:track:62qsgMnY4wg8nE5qjyOdWO&amp;amp;theme=dark&quot; width=&quot;100%&quot; height=&quot;80&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot; allow=&quot;encrypted-media&quot;&gt;
              &lt;/iframe&gt;
            &lt;/div&gt;
          &lt;/dd&gt;
        &lt;/dl&gt;

&lt;p&gt;Goodbye! :wink:&lt;/p&gt;

&lt;hr style=&quot;border-top: 1px solid #9D9D9D ; color: #9D9D9D ;&quot; class=&quot;endpost&quot; /&gt;</content><author><name></name></author><category term="example" /><category term="welcome" /><category term="jekyll" /><category term="typing" /></entry><entry><title type="html">c# week 2</title><link href="https://aaron19960821.github.io/blog/c-2/" rel="alternate" type="text/html" title="c# week 2" /><published>2017-03-11T00:00:00+08:00</published><updated>2017-03-11T00:00:00+08:00</updated><id>https://aaron19960821.github.io/blog/c#2</id><content type="html" xml:base="https://aaron19960821.github.io/blog/c-2/">&lt;h2 id=&quot;有关类的知识&quot;&gt;有关类的知识&lt;/h2&gt;
&lt;h3 id=&quot;类的解剖&quot;&gt;类的解剖&lt;/h3&gt;
&lt;p&gt;类的成分会有下面的几种情况。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;成员变量: 用于表示数据，可以属于对象的一个实例，也可以属于类自身(static).&lt;/li&gt;
  &lt;li&gt;事件: 当我们在图形化界面上执行一个操作的时候，我们很显然的就会引发一个事件。绑定在这个事件上的方法称为事件驱动程序。&lt;/li&gt;
  &lt;li&gt;函数成员: 单独拿出函数成员在这里进行重点的剖析。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;方法：就是我们常见的代码片段。&lt;/li&gt;
  &lt;li&gt;构造函数&lt;/li&gt;
  &lt;li&gt;析构函数：用于回收对象时被运行调用。&lt;/li&gt;
  &lt;li&gt;属性：支持封装原理。&lt;/li&gt;
  &lt;li&gt;索引器：用来在类当中表示一个数组。
    &lt;h2 id=&quot;static-veriable-and-instance-variable&quot;&gt;static veriable and instance variable&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;instance variable
在对象的生存期和对象保持一致。&lt;/li&gt;
  &lt;li&gt;static variable
被这个类所有，也就是不一定和每个对象的实例保持一致。
使用static variable的好处有下面的几点:&lt;/li&gt;
  &lt;li&gt;数据复制&lt;/li&gt;
  &lt;li&gt;减少数据的更改而导致的效率低下。&lt;/li&gt;
  &lt;li&gt;constant member
很显然，在缺省的情况下，常数变量是一个静态变量。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;函数成员&quot;&gt;函数成员&lt;/h2&gt;
&lt;h3 id=&quot;实例方法&quot;&gt;实例方法&lt;/h3&gt;

&lt;p&gt;类的所有对象共享每个实例方法的一个 拷贝.
编译器将此方法所调用对象的引用作为一个参数暗中传递给实例方法。&lt;/p&gt;

&lt;p&gt;静态方法
我们在使用静态方法的时候，可能会存在下面的几种情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不能明确指定属于某一特定对象的方法应该是静态的
一个特定的实例就是Math类当中的多个方法&lt;/li&gt;
  &lt;li&gt;使用静态方法是为了访问静态成员变量
一般来说，我们为了防止篡改，将静态的成员变量声明成为私有的，使用静态的函数可以来访问这些成员变量。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;引用参数&quot;&gt;引用参数&lt;/h3&gt;
&lt;p&gt;前面我们看到了,C#当中存在两种类型，值类型和引用类型。
如果我们传递一个引用类型给了一个方法，那么我们实际上是传了这个类型的引用给了这个方法，所以我们对数据的修改会对原来的数据进行修改。
但是，当我们传递的是一个值类型的时候，我们只是传给了方法相应的变量的值而不是引用，所以在方法里对数据的修改不会影响到原来的数据。如果我们要传的是值类型的方法，我们可以使用ref关键字。比如:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public static void(ref int a,ref int b)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;输出参数&quot;&gt;输出参数&lt;/h3&gt;
&lt;p&gt;每一个变量在调用之前都必须要初始化。&lt;/p&gt;

&lt;h3 id=&quot;方法重载&quot;&gt;方法重载&lt;/h3&gt;
&lt;p&gt;在C#当中，允许进行方法的重载, 编译器将会根据下面的要求选择最好的函数来进行调用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所提供的参数的数量和函数要求的数量一致。&lt;/li&gt;
  &lt;li&gt;每个参数必须含有和要求的参数相容的类型。
在一个类当中，可以出现多个具有相同的名称的类，只需要其对应的方法信号不同。
但是，当一个调用当中所提供的参数列表和所有的重载方法都不完全相同的时候，在参数的个数存在匹配的情况下，编译器会主动的寻找最合适的方法进行匹配。
当出现歧义的时候，编辑器会报出错误。
如果出现两个可以重载的方法，编辑器会优先选择参数是有符号数的那一个。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;this关键字自引用&quot;&gt;this关键字自引用&lt;/h3&gt;
&lt;p&gt;对象的每个方法包含了指向该方法当前调用的引用 this .&lt;/p&gt;

&lt;h3 id=&quot;对象的创建和垃圾回收&quot;&gt;对象的创建和垃圾回收&lt;/h3&gt;
&lt;p&gt;实例构造函数
自动初始化
c#会自动初始化变量，这取决于我们的基本类型的具体。&lt;/p&gt;

&lt;h3 id=&quot;构造函数初始化&quot;&gt;构造函数初始化&lt;/h3&gt;
&lt;p&gt;由于相同的类的构造函数可能也会重载，所以在执行的同时可能会有很多相同的核心代码，为了提高代码的利用率，我们可以在执行的时候先调用其他的初始化函数。比如下面的例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Location
{
	private int x;
	private int y;
	public Location():this(10,10){
	}
	public Location(int xx,int yy){
		this.x = xx;
		this.y = yy;
	}
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;垃圾回收&quot;&gt;垃圾回收&lt;/h3&gt;
&lt;p&gt;将null值赋给所有关于这个对象的引用，当没有引用指向这个对象的时候，这个对象就会被自动的放弃。
包含某个对象的引用的本地变量越过了作用域。&lt;/p&gt;

&lt;h3 id=&quot;析构函数&quot;&gt;析构函数&lt;/h3&gt;
&lt;p&gt;在一个对象的生命周期结束的时候，系统会自动执行析构函数。
但是，析构函数不会在对象没有用的时候立刻被回收。如果想要提高垃圾回收的速率，我们可是自定义一些函数, 比如 dispose 函数来进行垃圾的回收。&lt;/p&gt;

&lt;h3 id=&quot;索引器&quot;&gt;索引器&lt;/h3&gt;
&lt;p&gt;我们可以定义这样一个类，其本质上是数组，但是可以提供很多普通的数组所无法提供的内容。比如下面的代码:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using System;
class BirthsList
{
	private uint[] births;
	public BirthsList(int numofobj){
		this.births = new uint[numofobj];
	}
	public uint this [uint index]
	{
		get
		{
			return births[index];
		}
		set{
			births[index] = value;
		}
	}
}
class BirthsListTest
{
	public static void Main()
	{
		BirthsList bir = new BirthsList(4);
		uint sum;
		bir[1] = 10;
		bir[2] = 50;
		bir[0] = 100;
		bir[3] = 120;
		sum = bir[0] + bir[1] + bir[2] + bir[3];
		Console.WriteLine(&quot;Sum of these values: {0}.&quot;,sum);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重载索引器：在一个类当中，可能会存在多个索引器，使用不同的索引器信号可以构造出不同的索引器。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;索引器信号当中不包含元素类型&lt;/li&gt;
  &lt;li&gt;索引器信号当中不包含参数的名字。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term=".NET" /><summary type="html">有关类的知识 类的解剖 类的成分会有下面的几种情况。 成员变量: 用于表示数据，可以属于对象的一个实例，也可以属于类自身(static). 事件: 当我们在图形化界面上执行一个操作的时候，我们很显然的就会引发一个事件。绑定在这个事件上的方法称为事件驱动程序。 函数成员: 单独拿出函数成员在这里进行重点的剖析。</summary></entry><entry><title type="html">C# week1</title><link href="https://aaron19960821.github.io/blog/c-1/" rel="alternate" type="text/html" title="C# week1" /><published>2017-03-04T00:00:00+08:00</published><updated>2017-03-04T00:00:00+08:00</updated><id>https://aaron19960821.github.io/blog/c#1</id><content type="html" xml:base="https://aaron19960821.github.io/blog/c-1/">&lt;p&gt;OOP
面向过程编程及其先天的缺陷
软件由若干个子过程组成，当数据准备完毕之后，软件代码的执行次序就会被确定。
但是这个方法在用于大的工程的时候，程序员在测试的时候就需要追踪大量的程序分支，造成调试的诸多不便。在程序员协同工作的时候，很容易出现十分混乱的情况。&lt;/p&gt;

&lt;h2 id=&quot;oop&quot;&gt;OOP&lt;/h2&gt;

&lt;p&gt;我们将指令集划分成几个单独的模块，在这里就叫做类，几个对象之间通过相互传递消息来激活对方的指令集来交互协作，从而达到执行程序的目的。这样，对模块的创建或者维护就相对容易了。&lt;/p&gt;

&lt;h2 id=&quot;类型&quot;&gt;类型&lt;/h2&gt;
&lt;h3 id=&quot;强类型的语言&quot;&gt;强类型的语言&lt;/h3&gt;
&lt;p&gt;c#使用了兼容性的原则，当不相兼容的类型之间存在操作的时候，编译器就会报出一个错误。当然，对于可以兼容的类型，C#提供了隐式转换的方式来将一种类型转化成为一个可以和其兼容的语言。
引用类型：引用类型指的是其本身并不包含这个对象，而是包含了指向这个对象的位置。就是在栈中存储相应的指针，而在堆中存储相应的数据。
值类型：其本身保存了其真正的值。直接在栈中存储相应的信息。&lt;/p&gt;

&lt;h2 id=&quot;c中的主要类型&quot;&gt;c#中的主要类型&lt;/h2&gt;
&lt;h3 id=&quot;简单类型&quot;&gt;简单类型&lt;/h3&gt;
&lt;p&gt;枚举类型：用于创建符号常量，特别是和常量有关的对象。
结构类型：包含和类类似的方法和数据，但是十分不同的是结构类型就是一个值类型
类类型：定义一个对象的类别和创建对象的蓝图。
数组类型：保存少量或者大量数据集合的对象，数组中的数据项必须相同。
接口类型：指定一个或者多个方法头来规定抽象的行为&lt;/p&gt;

&lt;h2 id=&quot;string类&quot;&gt;string类&lt;/h2&gt;
&lt;h3 id=&quot;栈和堆的关系&quot;&gt;栈和堆的关系&lt;/h3&gt;
&lt;p&gt;所有的引用空间所指向的对象都会被.NET框架所控制，在结束程序的时候，堆的空间会自动被回收，所以我们不需要考虑内存空间泄漏的问题。&lt;/p&gt;</content><author><name></name></author><category term=".NET" /><summary type="html">OOP 面向过程编程及其先天的缺陷 软件由若干个子过程组成，当数据准备完毕之后，软件代码的执行次序就会被确定。 但是这个方法在用于大的工程的时候，程序员在测试的时候就需要追踪大量的程序分支，造成调试的诸多不便。在程序员协同工作的时候，很容易出现十分混乱的情况。</summary></entry><entry><title type="html">Polya Theory</title><link href="https://aaron19960821.github.io/blog/Polya/" rel="alternate" type="text/html" title="Polya Theory" /><published>2017-03-01T00:00:00+08:00</published><updated>2017-03-01T00:00:00+08:00</updated><id>https://aaron19960821.github.io/blog/Polya</id><content type="html" xml:base="https://aaron19960821.github.io/blog/Polya/">&lt;h2 id=&quot;问题的给出&quot;&gt;问题的给出&lt;/h2&gt;
&lt;p&gt;先看一个十分简单的问题，如果使用2种颜色给一个正方形染色，那么一共会存在多少种情况呢?
如果承认顶点是两两不同的，我们就可以看到一共存在24=16种方法。
但是，如果考虑同构又要怎么做呢？
我们可以发现，全染成一种颜色，一共2种方法，2,2分，2种方法，1,3分2种方法，所以存在着6种不同的方法。&lt;/p&gt;

&lt;h2 id=&quot;更多的思考&quot;&gt;更多的思考&lt;/h2&gt;
&lt;p&gt;我们先有了下面的一些定义:
对称: 设一个几何图形α, 我们令其运动到和其本身重合的图形叫做这个几何图形的一个对称，我们可以使用一个置换来表示这个对称。
着色: 就是将1−n的点着色成为c1..cn的颜色，这样的关系同样也是可以使用一个置换来进行表示。
我们在这里定义，两个着色c1,c2关于G等价，就是在G中存在这样的置换，使得有下面的式子成立.&lt;/p&gt;

\[f∗c1=c2\]

&lt;p&gt;稳定核: 对于一种着色，我们定义G(c)是其稳定核，而且这个稳定核是置换群。
很容易证明这个代数系统的结合律，单位元和逆元的存在性。
推论1: 设c是C中的一个着色，那么和c等价的着色数等于G中的置换个数除以c中的稳定核中的置换的数目.&lt;/p&gt;

\[L=\frac{|G|}{|G(c)|}\]

&lt;p&gt;证明:
存在|G|个着色可以从置换群处理得到，但是，对于每个置换，又会存在G(c)个置换和其产生的效果相同，我们很容易就得到了这样的解。
Burnside定理: G是X的置换群，而且C是X中满足下面的一个着色集合，对于G中所有的g和C中所有的c,g∗c还在C中，则非等价着色数是由下面的定理给出:&lt;/p&gt;

\[N(G,C)=\frac{1}{|G|}\sum C(f)\]

&lt;h2 id=&quot;polya计数原理&quot;&gt;Polya计数原理&lt;/h2&gt;
&lt;p&gt;对于任何的一个置换，我们可以将其分解成多个循环节，我们立刻就可以得到下面的一个很强的结论:
在这种情况下两种着色要能通过置换得到等价，必须将循环节中的结点染色成相同的颜色。就是:&lt;/p&gt;

\[C(f)=\sum f(x)\]

&lt;p&gt;我们就可以简化上面的定理，来减小算法的复杂度了。&lt;/p&gt;</content><author><name></name></author><category term="Algorithm" /><category term="math" /><summary type="html">问题的给出 先看一个十分简单的问题，如果使用2种颜色给一个正方形染色，那么一共会存在多少种情况呢? 如果承认顶点是两两不同的，我们就可以看到一共存在24=16种方法。 但是，如果考虑同构又要怎么做呢？ 我们可以发现，全染成一种颜色，一共2种方法，2,2分，2种方法，1,3分2种方法，所以存在着6种不同的方法。</summary></entry><entry><title type="html">插头DP</title><link href="https://aaron19960821.github.io/blog/Chatou-dp/" rel="alternate" type="text/html" title="插头DP" /><published>2017-02-28T00:00:00+08:00</published><updated>2017-02-28T00:00:00+08:00</updated><id>https://aaron19960821.github.io/blog/Chatou-dp</id><content type="html" xml:base="https://aaron19960821.github.io/blog/Chatou-dp/">&lt;h2 id=&quot;问题的引入&quot;&gt;问题的引入&lt;/h2&gt;
&lt;p&gt;在文章的开头，首先膜拜CDQ女神，写的实在是太棒了。
我们先来看一个十分简单的问题：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;给定一个n*m的方格块，有一些是不可通过的障碍方格，我们要求其中的哈密顿回路的个数。&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;分析&quot;&gt;分析&lt;/h2&gt;
&lt;p&gt;首先我们发现，对于每一个格子而言，在一条哈密顿回路当中，回路都是从一个方向进入，从一个方向出去的。(度数一定为2), 所以我们就引入了&lt;code class=&quot;highlighter-rouge&quot;&gt;插头&lt;/code&gt;的概念。&lt;/p&gt;

&lt;p&gt;对于一个四联通的图来说，每个格子存在4个插头，一共会有两个有效，所以一共就会存在6种情况。我们可以依据这些来进行求解。&lt;/p&gt;

&lt;p&gt;而后，对于每个插头，我们需要记录其连通性，因为是一条哈密顿回路，所以最后所有的插头都必须是联通的。我们来看看下面的几种情况:&lt;/p&gt;

&lt;p&gt;如果没有上插头和左插头，那么说明存在右插头和下插头，就是要加入新的联通分量。
如果上插头和左插头两个存在其中一个，那么我们可以显而易见的得到就是它们会转化成右插头或者下插头中的一个，不会产生新的联通分量。
如果均存在的话，即合并联通分量。&lt;/p&gt;

&lt;h2 id=&quot;实现&quot;&gt;实现&lt;/h2&gt;
&lt;p&gt;我们使用二进制位，最小表示法来存储格子联通的情况。
为了防止不必要的状态的出现，我们可以使用BFS扩展的方式来进行迭代，得到结果。
几个题目：
&lt;a href=&quot;https://github.com/Aaron19960821/icpcarchive/blob/master/dp/ural1519.cpp&quot;&gt;ural1519&lt;/a&gt;
&lt;a href=&quot;https://github.com/Aaron19960821/icpcarchive/blob/master/dp/hdu1964.cpp&quot;&gt;hdu1964&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="algorithm" /><category term="ACM/ICPC" /><summary type="html">问题的引入 在文章的开头，首先膜拜CDQ女神，写的实在是太棒了。 我们先来看一个十分简单的问题：</summary></entry><entry><title type="html">bitmask dp</title><link href="https://aaron19960821.github.io/blog/Bitmask-dp/" rel="alternate" type="text/html" title="bitmask dp" /><published>2017-02-16T00:00:00+08:00</published><updated>2017-02-16T00:00:00+08:00</updated><id>https://aaron19960821.github.io/blog/Bitmask-dp</id><content type="html" xml:base="https://aaron19960821.github.io/blog/Bitmask-dp/">&lt;p&gt;The link of essay:
https://github.com/Aaron19960821/icpcarchive/blob/master/essayFromNationTeam/动态规划之状态压缩.pdf&lt;/p&gt;

&lt;p&gt;Bitmask is a very important technique to divide a huge problem into smaller ones to ensure they are independent from each other. After reading the essay from Chou Wei on the train, I acquired more understanding of this topic.&lt;/p&gt;

&lt;h2 id=&quot;what-we-have-to-do&quot;&gt;What we have to do&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;We have to make sure the definition of the problems.&lt;/li&gt;
  &lt;li&gt;We have to know if one situation can transform to another one.(Usually we use bitmask calculation).&lt;/li&gt;
  &lt;li&gt;We do not always use binary to represent our problem, other methods is welcomed if it is necessary.&lt;/li&gt;
  &lt;li&gt;We use this method when the problem is referring to conbination rather than permutation.
Sample problems in this essay
&lt;a href=&quot;https://github.com/Aaron19960821/icpcarchive/blob/master/dp/poj1185.cpp&quot;&gt;poj1185&lt;/a&gt;
&lt;a href=&quot;https://github.com/Aaron19960821/icpcarchive/blob/master/dp/poj2411.cpp&quot;&gt;poj2411&lt;/a&gt;
&lt;a href=&quot;https://github.com/Aaron19960821/icpcarchive/blob/master/dp/poj2441.cpp&quot;&gt;poj2441&lt;/a&gt;
&lt;a href=&quot;https://github.com/Aaron19960821/icpcarchive/blob/master/dp/poj2663.cpp&quot;&gt;poj2663&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="algorithm" /><category term="ACM/ICPC" /><summary type="html">The link of essay: https://github.com/Aaron19960821/icpcarchive/blob/master/essayFromNationTeam/动态规划之状态压缩.pdf</summary></entry></feed>